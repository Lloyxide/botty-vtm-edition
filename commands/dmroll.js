const { SlashCommandBuilder, MessageEmbed, EmbedBuilder} = require('discord.js');
const db = require('../database');
const dictionary = require('../dictionary.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('dmroll')
        .setDescription('Lancer un jet de dÃ©s pour Vampire : La Mascarade')
        .setDefaultMemberPermissions(8)
        .addIntegerOption(option =>
            option.setName('dices')
                .setDescription('Nombre de D10')
                .setRequired(true))
        .addIntegerOption(option =>
            option.setName('hunger')
                .setDescription('Soif du jet')
                .setRequired(false)),

    async execute(interaction) {
        const dicePool = interaction.options.getInteger('dices');
        const hunger = interaction.options.getString('hunger') || 0;

        if (dicePool <= 0) {
            return interaction.reply({ content: 'Les attributs/compÃ©tences choisis ne sont pas valides.', ephemeral: true });
        }

        // Lancer les dÃ©s
        let rolls = [];
        for (let i = 0; i < dicePool; i++) {
            rolls.push(Math.floor(Math.random() * 10) + 1);
        }

        let totalDice = rolls.length;
        let hungerDice = Math.min(hunger, totalDice);
        let normalDice = totalDice - hungerDice;

        let hungerRolls = hungerDice > 0 ? rolls.slice(-hungerDice) : [];
        let normalRolls = rolls.slice(0, normalDice);

        let successes = normalRolls.filter(die => die >= 6).length;
        let hungerSuccesses = hungerRolls.filter(die => die >= 6).length;

        let normalCriticals = normalRolls.filter(die => die === 10).length;
        let hungerCriticals = hungerRolls.filter(die => die === 10).length;
        let hungerFails = hungerRolls.filter(die => die === 1).length;

        let str = dicePool + "D10" + ((hunger) ? " (" + hunger + " de soif)" : "");

        let totalSuccesses = successes + hungerSuccesses;
        let bonusSuccesses = Math.floor((normalCriticals + hungerCriticals) / 2) * 2;
        totalSuccesses += bonusSuccesses;

        let resultMessage = `SuccÃ¨s totaux : **${totalSuccesses}**\n`;
        let status = 'ðŸŽ² **Jet de dÃ©s**';
        let color = '#800080'; // Violet par dÃ©faut

        // ðŸ”¥ Gestion des succÃ¨s critiques et Ã©checs ðŸ”¥
        if (normalCriticals >= 2) {
            resultMessage += '\nðŸ”¥ **SuccÃ¨s critique !**';
            status = 'ðŸ”¥ **SuccÃ¨s Critique !**';
        }

        if (normalCriticals >= 1 && hungerCriticals >= 1) {
            resultMessage += '\nâš¡ **Triomphe Brutal !**';
            totalSuccesses += 2;
            status = 'âš¡ **SuccÃ¨s Triomphal !**';
        }

        if (hungerFails >= 1) {
            resultMessage += '\nðŸ’€ **Potentiel Ã©chec bestial !**';
            status = 'ðŸ’€ **Ã‰chec Bestial !**';
            color = '#ff0000'; // Rouge pour un Ã©chec bestial
        }

        const embed = new EmbedBuilder()
            .setColor(color)
            .setTitle(status)
            .setDescription(`**${str} :**`)
            .addFields(
                { name: 'ðŸŽ² DÃ©s normaux', value: normalRolls.length > 0 ? normalRolls.join(', ') : 'Aucun', inline: true },
                { name: 'ðŸ©¸ DÃ©s de Soif', value: hungerRolls.length > 0 ? hungerRolls.join(', ') : 'Aucun', inline: true },
                { name: 'ðŸ“Š RÃ©sultats', value: resultMessage }
            )
            .setFooter({ text: 'Gotham by Night - Jet de dÃ©s' });

        interaction.reply({ embeds: [embed], ephemeral : true });

    }
};
